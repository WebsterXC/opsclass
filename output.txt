CHANGES:20140122 dholland	Use ssize_t and pid_t more in unistd.h.
design/shell.txt:   The background jobs are tracked in an array of MAXBG pid_t's. If an
kern/include/kern/fcntl.h:	pid_t l_pid;            /* process that holds the lock */
kern/include/kern/types.h: * supposed to also define e.g. pid_t.)
kern/include/kern/types.h:typedef __i32 __pid_t;     /* Process ID */
kern/include/types.h:typedef __pid_t pid_t;
kern/proc/pid.c:pid_t
man/syscall/fork.html:<tt>pid_t</tt><br>
man/syscall/getpid.html:<tt>pid_t</tt><br>
man/syscall/waitpid.html:<tt>pid_t</tt><br>
man/syscall/waitpid.html:<tt>waitpid(pid_t </tt><em>pid</em><tt>, int *</tt><em>status</em><tt>,
userland/bin/sh/sh.c:static pid_t bgpids[MAXBG];
userland/bin/sh/sh.c:remember_bg(pid_t pid)
userland/bin/sh/sh.c:dowait(pid_t pid)
userland/bin/sh/sh.c:dowaitpoll(pid_t pid)
userland/bin/sh/sh.c:	pid_t foundpid;
userland/bin/sh/sh.c:	pid_t pid;
userland/bin/sh/sh.c:	pid_t pid;
userland/bin/tac/tac.c:	pid_t pid;
userland/include/sys/types.h: * stuff like size_t and pid_t, as well as define a few other
userland/include/sys/types.h:typedef __pid_t pid_t;
userland/include/unistd.h:pid_t fork(void);
userland/include/unistd.h:pid_t waitpid(pid_t pid, int *returncode, int flags);
userland/include/unistd.h:pid_t getpid(void);
userland/lib/libtest/quint.c:pid_t
userland/lib/libtest/quint.c:	pid_t pid = fork();
userland/lib/libtest/quint.c:	pid_t pids[5];
userland/lib/libtest/triple.c:pid_t
userland/lib/libtest/triple.c:	pid_t pid = fork();
userland/lib/libtest/triple.c:	pid_t pids[3];
userland/testbin/badcall/bad_lseek.c:	pid_t pid;
userland/testbin/badcall/bad_waitpid.c:wait_badpid(pid_t pid, const char *desc)
userland/testbin/badcall/bad_waitpid.c:	pid_t rv;
userland/testbin/badcall/bad_waitpid.c:	pid_t pid, rv;
userland/testbin/badcall/bad_waitpid.c:	pid_t pid, rv;
userland/testbin/badcall/bad_waitpid.c:	pid_t pid, rv;
userland/testbin/badcall/bad_waitpid.c:	pid_t pid, rv;
userland/testbin/badcall/bad_waitpid.c:	pid_t rv;
userland/testbin/badcall/bad_waitpid.c:	pid_t mypid, childpid, rv;
userland/testbin/badcall/bad_waitpid.c:	pid_t pids[2], mypid, otherpid;
userland/testbin/badcall/bad_waitpid.c:	pid_t pids[2];
userland/testbin/bigfork/bigfork.c:pid_t
userland/testbin/bigfork/bigfork.c:	pid_t pid;
userland/testbin/bigfork/bigfork.c:dowait(pid_t pid)
userland/testbin/bigfork/bigfork.c:	pid_t pids[BRANCHES];
userland/testbin/crash/crash.c:	pid_t pid;
userland/testbin/dirconc/dirconc.c:pid_t
userland/testbin/dirconc/dirconc.c:	pid_t pid;
userland/testbin/dirconc/dirconc.c:	pid_t pids[NPROCS*4], wp;
userland/testbin/f_test/f_test.c:pid_t
userland/testbin/f_test/f_test.c:	pid_t pid = fork();
userland/testbin/multiexec/multiexec.c:	pid_t pids[njobs];
userland/testbin/parallelvm/parallelvm.c:	pid_t pids[NJOBS];
userland/testbin/psort/psort.c:pid_t
userland/testbin/psort/psort.c:	pid_t pid;
userland/testbin/psort/psort.c:dowait(int guy, pid_t pid)
userland/testbin/psort/psort.c:	pid_t pids[numprocs];
userland/testbin/redirect/redirect.c:	pid_t pid;
userland/testbin/rmtest/rmtest.c:	pid_t pid;
userland/testbin/sbrktest/sbrktest.c:pid_t
userland/testbin/sbrktest/sbrktest.c:	pid_t pid;
userland/testbin/sbrktest/sbrktest.c:dowait(pid_t pid)
userland/testbin/sbrktest/sbrktest.c:	pid_t pid;
userland/testbin/sbrktest/sbrktest.c:	pid_t pid;
userland/testbin/sbrktest/sbrktest.c:	pid_t pid;
userland/testbin/sbrktest/sbrktest.c:	pid_t pid;
userland/testbin/schedpong/main.c:dowait(pid_t pid)
userland/testbin/schedpong/main.c:	pid_t mypids[count];
userland/testbin/schedpong/main.c:       pid_t *retpid)
userland/testbin/schedpong/main.c:waitall(pid_t *pids, unsigned numpids)
userland/testbin/schedpong/main.c:	pid_t pids[numponggroups + 2];
userland/testbin/shll/shll.c:static pid_t bgpids[MAXBG];
userland/testbin/shll/shll.c:remember_bg(pid_t pid)
userland/testbin/shll/shll.c:dowait(pid_t pid)
userland/testbin/shll/shll.c:dowaitpoll(pid_t pid)
userland/testbin/shll/shll.c:	pid_t foundpid;
userland/testbin/shll/shll.c:	pid_t pid;
userland/testbin/shll/shll.c:	pid_t pid;
userland/testbin/usemtest/usemtest.c:dowait(pid_t pid, unsigned num)
userland/testbin/usemtest/usemtest.c:	pid_t r;
userland/testbin/usemtest/usemtest.c:	pid_t pids[NUMJOBS];
userland/testbin/usemtest/usemtest.c:	pid_t pids[NUMJOBS];
