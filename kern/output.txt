arch/mips/syscall/syscall.c:	    case SYS_waitpid:
arch/mips/syscall/syscall.c:		err = sys_waitpid(tf->tf_a0, (int*)tf->tf_a1, tf->tf_a2, &retval);
arch/mips/thread/cpu.c:wait(void)
arch/mips/thread/cpu.c:		"wait;"			/* suspend until interrupted */
arch/mips/thread/cpu.c:	wait();
arch/mips/thread/cpu.c:		wait();
arch/mips/vm/tlb-mips161.S:    * Pipeline hazard: must wait between setting entryhi/lo and
arch/mips/vm/tlb-mips161.S:   ssnop		/* wait for pipeline hazard */
arch/mips/vm/tlb-mips161.S:    * Pipeline hazard: must wait between setting entryhi/lo and
arch/mips/vm/tlb-mips161.S:   ssnop		/* wait for pipeline hazard */
arch/mips/vm/tlb-mips161.S:    * Pipeline hazard: must wait between setting c0_index and
arch/mips/vm/tlb-mips161.S:   ssnop		/* wait for pipeline hazard */
arch/mips/vm/tlb-mips161.S:   ssnop		/* wait for pipeline hazard */
arch/mips/vm/tlb-mips161.S:    * Pipeline hazard: must wait between setting c0_entryhi/lo and
arch/mips/vm/tlb-mips161.S:   ssnop		/* wait for pipeline hazard */
arch/mips/vm/tlb-mips161.S:   ssnop		/* wait for pipeline hazard */
arch/mips/vm/tlb-mips161.S:   ssnop			/* wait for pipeline hazard */
arch/mips/vm/tlb-mips161.S:   ssnop			/* wait for pipeline hazard */
arch/mips/vm/tlb-mips161.S:   ssnop			/* wait for pipeline hazard */
Binary file compile/ASST1/stoplight.o matches
Binary file compile/ASST1/synch.o matches
Binary file compile/ASST1/synchprobs.o matches
Binary file compile/ASST1/synchtest.o matches
Binary file compile/ASST1/tt3.o matches
Binary file compile/ASST1/cpu.o matches
Binary file compile/ASST1/emu.o matches
Binary file compile/ASST1/kernel matches
Binary file compile/ASST1/rwtest.o matches
Binary file compile/ASST1/semfs_vnops.o matches
Binary file compile/ASST1/semunit.o matches
Binary file compile/ASST2/synch.o matches
Binary file compile/ASST2/synchtest.o matches
Binary file compile/ASST2/syscall.o matches
Binary file compile/ASST2/tt3.o matches
Binary file compile/ASST2/cpu.o matches
Binary file compile/ASST2/emu.o matches
Binary file compile/ASST2/kernel matches
Binary file compile/ASST2/proc_syscalls.o matches
Binary file compile/ASST2/rwtest.o matches
Binary file compile/ASST2/semfs_vnops.o matches
Binary file compile/ASST2/semunit.o matches
compile/ASST2/.depend: ../../include/synch.h ../../include/kern/wait.h \
compile/ASST2/.depend.proc_syscalls.c: ../../include/synch.h ../../include/kern/wait.h \
dev/generic/console.c: * We use two locks so readers waiting for input don't lock out writers.
dev/generic/console.c: * Print a character, using polling instead of interrupts to wait for
dev/generic/console.c: * Print a character, using interrupts to wait for I/O completion.
dev/generic/console.c: * Read a character, using interrupts to wait for I/O completion.
dev/lamebus/emu.c:emu_waitdone(struct emu_softc *sc)
dev/lamebus/emu.c:	result = emu_waitdone(sc);
dev/lamebus/emu.c:		result = emu_waitdone(sc);
dev/lamebus/emu.c:	result = emu_waitdone(sc);
dev/lamebus/emu.c:	result = emu_waitdone(sc);
dev/lamebus/emu.c:	result = emu_waitdone(sc);
dev/lamebus/emu.c:	result = emu_waitdone(sc);
dev/lamebus/lhd.c:		/* Now wait until the interrupt handler tells us we're done. */
fs/semfs/semfs.h:	struct cv *sems_cv;			/* CV to wait */
fs/semfs/semfs_vnops.c:			cv_wait(sem->sems_cv, sem->sems_lock);
include/kern/fcntl.h:#define F_SETLKW        9       /* acquire record locks and wait */
include/kern/syscall.h:#define SYS_waitpid      4
include/kern/syscall.h://#define SYS_wait4      34
include/kern/wait.h: * Definitions for wait().
include/kern/wait.h:/* Flags for waitpid() and equivalent. */
include/kern/wait.h:/* Special "pids" to wait for. */
include/kern/wait.h:/* Encoding macros, used by the kernel to generate the wait result. */
include/synch.h: * to wait until a variable meets a particular condition, but there's no
include/synch.h: *    cv_wait      - Release the supplied lock, go to sleep, and, after
include/synch.h:void cv_wait(struct cv *cv, struct lock *lock);
include/synch.h:	volatile bool is_writer_waiting;	// Flag representing if a writer is waiting for access
include/syscall.h:int sys_waitpid(pid_t pid, int *status, int options, int *childpid);
include/thread.h:	const char *t_wchan_name;	/* Name of wait channel, if sleeping */
include/wchan.h: * Create a wait channel. Use NAME as a symbolic name for the channel.
include/wchan.h: * Destroy a wait channel. Must be empty and unlocked.
include/wchan.h: * Go to sleep on a wait channel. The current thread is suspended
include/wchan.h: * Wake up one thread, or all threads, sleeping on a wait channel.
main/main.c: * Kernel main. Boot up, then fork the menu thread; wait for a reboot
main/menu.c: * Note that this does not wait for the subprogram to finish, but
main/menu.c: * so you should have it call your system-calls-assignment waitpid
proc/proc.c: * Note: nothing currently calls this. Your wait/exit code will
proc/proc.c:	 * your wait/exit design calls for the process structure to
proc/proc.c:	 * hang around beyond process exit. Some wait/exit designs
proc/pr_table.c: * list are children who have exited, but are still waiting on their parent to collect the exit
synchprobs/stoplight.c:struct cv *wait_intersection;
synchprobs/stoplight.c:	wait_intersection = cv_create("vehicle cv");
synchprobs/stoplight.c:	cv_destroy(wait_intersection);
synchprobs/stoplight.c:	lock_acquire(lock_i_need(direction));	// Straight and Left will wait for this lock
synchprobs/stoplight.c:		cv_wait(wait_intersection, intersection_lockdown);
synchprobs/stoplight.c:	cv_signal(wait_intersection, intersection_lockdown);
synchprobs/stoplight.c:		cv_wait(wait_intersection, intersection_lockdown);
synchprobs/stoplight.c:	cv_signal(wait_intersection, intersection_lockdown);	
syscall/proc_syscalls.c:#include <kern/wait.h>
syscall/proc_syscalls.c:sys_waitpid(pid_t pid, int *status, int options, int *childpid){
syscall/proc_syscalls.c:	/* If status is NULL, waitpid behaves the same just doesn't give
syscall/proc_syscalls.c:	/* Get waiter process pnode */
syscall/proc_syscalls.c:	struct proc *waiterprocess;
syscall/proc_syscalls.c:	waiterprocess = proc_getptr(pid);
syscall/proc_syscalls.c:	node = proc_get_pnode(waiterprocess);
syscall/proc_syscalls.c:	/* Determine if waiter process exists */
syscall/proc_syscalls.c:	if( waiterprocess == NULL || node == NULL ){
syscall/proc_syscalls.c:	/* Determine if waiter process has finished */
syscall/proc_syscalls.c:	if( waiterprocess->isactive == true ){
syscall/proc_syscalls.c:		// Waiter process is still running, wait for it to finish
syscall/proc_syscalls.c:		lock_acquire(waiterprocess->p_cv_lock);
syscall/proc_syscalls.c:		cv_wait( waiterprocess->p_cv, waiterprocess->p_cv_lock );
syscall/proc_syscalls.c:		lock_release(waiterprocess->p_cv_lock);
syscall/proc_syscalls.c:		lock_acquire(waiterprocess->p_cv_lock);
syscall/proc_syscalls.c:		lock_release(waiterprocess->p_cv_lock); 	
syscall/proc_syscalls.c:	proc_destroy(waiterprocess);	// Call proc_destroy?
syscall/proc_syscalls.c:		// Process has parent; could be waited on so call proc_exited
test/automationtest.c:#include <kern/wait.h>
test/semunit.c:static unsigned waiters_running = 0;
test/semunit.c:static struct spinlock waiters_lock = SPINLOCK_INITIALIZER;
test/semunit.c: * A thread that just waits on a semaphore.
test/semunit.c:waiter(void *vsem, unsigned long junk)
test/semunit.c:	spinlock_acquire(&waiters_lock);
test/semunit.c:	KASSERT(waiters_running > 0);
test/semunit.c:	waiters_running--;
test/semunit.c:	spinlock_release(&waiters_lock);
test/semunit.c: * Set up a waiter.
test/semunit.c:makewaiter(struct semaphore *sem)
test/semunit.c:	spinlock_acquire(&waiters_lock);
test/semunit.c:	waiters_running++;
test/semunit.c:	spinlock_release(&waiters_lock);
test/semunit.c:	result = thread_fork("semunit waiter", NULL, waiter, sem, 0);
test/semunit.c:	kprintf("Sleeping for waiter to run\n");
test/semunit.c: * 6. Passing a semaphore with a waiting thread to sem_destroy asserts
test/semunit.c:	makewaiter(sem);
test/semunit.c:	panic("semu6: wchan_destroy with waiters succeeded\n");
test/semunit.c: * 8/9. After calling V on a semaphore with no threads waiting:
test/semunit.c: * 10/11. After calling V on a semaphore with one thread waiting, and giving
test/semunit.c:	makewaiter(sem);
test/semunit.c:	spinlock_acquire(&waiters_lock);
test/semunit.c:	KASSERT(waiters_running == 1);
test/semunit.c:	spinlock_release(&waiters_lock);
test/semunit.c:	/* give the waiter time to exit */
test/semunit.c:	spinlock_acquire(&waiters_lock);
test/semunit.c:	KASSERT(waiters_running == 0);
test/semunit.c:	spinlock_release(&waiters_lock);
test/semunit.c: * 12/13. After calling V on a semaphore with two threads waiting, and
test/semunit.c:	makewaiter(sem);
test/semunit.c:	makewaiter(sem);
test/semunit.c:	spinlock_acquire(&waiters_lock);
test/semunit.c:	KASSERT(waiters_running == 2);
test/semunit.c:	spinlock_release(&waiters_lock);
test/semunit.c:	/* give the waiter time to exit */
test/semunit.c:	spinlock_acquire(&waiters_lock);
test/semunit.c:	KASSERT(waiters_running == 1);
test/semunit.c:	spinlock_release(&waiters_lock);
test/semunit.c:	spinlock_acquire(&waiters_lock);
test/semunit.c:	KASSERT(waiters_running == 0);
test/semunit.c:	spinlock_release(&waiters_lock);
test/semunit.c:	kprintf("semu19: waiting for parent to sleep\n");
test/synchprobs.c:	 * Release a random number of matchmakers and wait for them and their
test/synchprobs.c:	 * Release the rest of the matchmakers and wait for everyone to finish.
test/synchprobs.c:		cv_wait(startcv, testlock);
test/synchprobs.c:		cv_wait(startcv, testlock);
test/synchprobs.c:		cv_wait(startcv, testlock);
test/synchtest.c:			cv_wait(testcv, testlock);
test/synchtest.c:				kprintf_n("cv_wait took only %u ns\n", ts2.tv_nsec);
test/synchtest.c:		 * time waiting on the cv.
test/synchtest.c:			cv_wait(testcvs[i], testlocks[i]);
test/synchtest.c:	cv_wait(testcv, testlock);
test/synchtest.c:	cv_wait(testcv, testlock);
test/synchtest.c:	cv_wait(testcv, testlock); KASSERT(testval1 == 1);
test/tt3.c:/* N distinct wait channels */
test/tt3.c:static struct wchan *waitchans[NWAITCHANS];
test/tt3.c:			waitchans[i] = wchan_create(kstrdup(tmp));
test/tt3.c:			wc = waitchans[n];
test/tt3.c:			wc = waitchans[n];
thread/clock.c: * Once a second, everything waiting on lbolt is awakened by CPU 0.
thread/spinlock.c: * atomic operation to wait for the lock to be free.
thread/synch.c:	/* wchan_cleanup will assert if anyone's waiting on it */
thread/synch.c:		 * threads are waiting. Apparently according to some
thread/synch.c:		// While there are no slots for the lock, wait on		
thread/synch.c:		// held wait channel
thread/synch.c:	// Increase counter, notify done using lock via wakeup on wait channel
thread/synch.c:/* CVT5 Update: Previously, CV's were waiting on the passed lock's wait channel. This conflicted
thread/synch.c: * when trying to pass a different lock but same cv (different wait channel pointers). The top
thread/synch.c:cv_wait(struct cv *cv, struct lock *lock)
thread/synch.c:	// Set current number of readers & anti-starvation guard to 0. No writers waiting at start.
thread/synch.c:	rwlock->is_writer_waiting = false;
thread/synch.c:	// If there is a writer awaiting access, yield to it via cv_wait.
thread/synch.c:	while(rwlock->is_writer_waiting || rwlock->anti_starvation > 6){
thread/synch.c:		cv_wait(rwlock->conditional_read, rwlock->rw_lock);
thread/synch.c:	// Set flag to declare waiting; so readers know they should yield either now, or soon.
thread/synch.c:	rwlock->is_writer_waiting = true;
thread/synch.c:	// Loop until all readers are on cv_wait. Then proceed.
thread/synch.c:		cv_wait(rwlock->conditional_write, rwlock->rw_lock);	
thread/synch.c:	// Writer now exclusively owns access, readers are all on cv_wait
thread/synch.c:	rwlock->is_writer_waiting = false;
thread/synch.c:	// Let readers on cv_wait know they can resume reading the resource
thread/synch.c:	// There may be (and probably is) more than one writer on the wait channel
thread/thread.c:	struct threadlist wc_threads;	/* list of waiting threads */
thread/thread.c:/* Used to wait for secondary CPUs to come online. */
thread/thread.c:	 * We could wait for them to stop, except that they might not.
thread/thread.c:	 * ourselves couldn't sleep to wait for an I/O completion
thread/thread.c:	 * We should probably wait for them to stop and shut them off
thread/thread.c: * If NEWSTATE is S_SLEEP, the thread is queued on the wait channel
thread/thread.c:		 * Add the thread to the list in the wait channel, and
thread/thread.c:	/* Clear the wait channel and set the thread state. */
thread/thread.c:	/* Clear the wait channel and set the thread state. */
thread/thread.c: * should be cleaned up right away. The rest has to wait until
thread/thread.c:	 * around, depending on how your wait/exit works.
thread/thread.c: * Create a wait channel. NAME is a symbolic string name for it.
thread/thread.c: * arrangements should be made to free it after the wait channel is
thread/thread.c: * Destroy a wait channel. Must be empty and unlocked.
thread/thread.c: * wait channel WC, whose associated spinlock is LK. Calling wakeup on
thread/thread.c: * Wake up one thread sleeping on a wait channel.
thread/thread.c: * Wake up all threads sleeping on a wait channel.
